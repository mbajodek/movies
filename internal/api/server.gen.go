// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.5.0 DO NOT EDIT.
package api

import (
	"context"
	"encoding/json"
	"fmt"
	"net/http"

	"github.com/labstack/echo/v4"
	"github.com/oapi-codegen/runtime"
	strictecho "github.com/oapi-codegen/runtime/strictmiddleware/echo"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

// Character defines model for Character.
type Character struct {
	Id    openapi_types.UUID `json:"id"`
	Movie Movie              `json:"movie"`
	Name  string             `json:"name"`
}

// CreateCharacterRequest defines model for CreateCharacterRequest.
type CreateCharacterRequest struct {
	MovieId openapi_types.UUID `json:"movieId"`
	Name    string             `json:"name"`
}

// CreateMovieRequest defines model for CreateMovieRequest.
type CreateMovieRequest struct {
	Title string `json:"title"`
	Year  int    `json:"year"`
}

// Movie defines model for Movie.
type Movie struct {
	Id    openapi_types.UUID `json:"id"`
	Title string             `json:"title"`
	Year  int                `json:"year"`
}

// UpdateCharacterRequest defines model for UpdateCharacterRequest.
type UpdateCharacterRequest struct {
	Id      openapi_types.UUID  `json:"id"`
	MovieId *openapi_types.UUID `json:"movieId,omitempty"`
	Name    string              `json:"name"`
}

// PostCharactersJSONRequestBody defines body for PostCharacters for application/json ContentType.
type PostCharactersJSONRequestBody = CreateCharacterRequest

// PutCharactersJSONRequestBody defines body for PutCharacters for application/json ContentType.
type PutCharactersJSONRequestBody = UpdateCharacterRequest

// PostMoviesJSONRequestBody defines body for PostMovies for application/json ContentType.
type PostMoviesJSONRequestBody = CreateMovieRequest

// PutMoviesJSONRequestBody defines body for PutMovies for application/json ContentType.
type PutMoviesJSONRequestBody = Movie

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get all Characters
	// (GET /characters)
	GetCharacters(ctx echo.Context) error
	// Create Character
	// (POST /characters)
	PostCharacters(ctx echo.Context) error
	// Update Character
	// (PUT /characters)
	PutCharacters(ctx echo.Context) error
	// Delete Character
	// (DELETE /characters/{id})
	DeleteCharactersId(ctx echo.Context, id openapi_types.UUID) error
	// Get Character by id
	// (GET /characters/{id})
	GetCharactersId(ctx echo.Context, id openapi_types.UUID) error
	// Get character cert by id
	// (GET /characters/{id}/cert)
	GetCharactersIdCert(ctx echo.Context, id openapi_types.UUID) error
	// Get all Movies
	// (GET /movies)
	GetMovies(ctx echo.Context) error
	// Create Movie
	// (POST /movies)
	PostMovies(ctx echo.Context) error
	// Update Movie
	// (PUT /movies)
	PutMovies(ctx echo.Context) error
	// Delete Movie
	// (DELETE /movies/{id})
	DeleteMoviesId(ctx echo.Context, id openapi_types.UUID) error
	// Get Movie by id
	// (GET /movies/{id})
	GetMoviesId(ctx echo.Context, id openapi_types.UUID) error
	// Get Movie cert by id
	// (GET /movies/{id}/cert)
	GetMoviesIdCert(ctx echo.Context, id openapi_types.UUID) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetCharacters converts echo context to params.
func (w *ServerInterfaceWrapper) GetCharacters(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetCharacters(ctx)
	return err
}

// PostCharacters converts echo context to params.
func (w *ServerInterfaceWrapper) PostCharacters(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostCharacters(ctx)
	return err
}

// PutCharacters converts echo context to params.
func (w *ServerInterfaceWrapper) PutCharacters(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PutCharacters(ctx)
	return err
}

// DeleteCharactersId converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteCharactersId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DeleteCharactersId(ctx, id)
	return err
}

// GetCharactersId converts echo context to params.
func (w *ServerInterfaceWrapper) GetCharactersId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetCharactersId(ctx, id)
	return err
}

// GetCharactersIdCert converts echo context to params.
func (w *ServerInterfaceWrapper) GetCharactersIdCert(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetCharactersIdCert(ctx, id)
	return err
}

// GetMovies converts echo context to params.
func (w *ServerInterfaceWrapper) GetMovies(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetMovies(ctx)
	return err
}

// PostMovies converts echo context to params.
func (w *ServerInterfaceWrapper) PostMovies(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostMovies(ctx)
	return err
}

// PutMovies converts echo context to params.
func (w *ServerInterfaceWrapper) PutMovies(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PutMovies(ctx)
	return err
}

// DeleteMoviesId converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteMoviesId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DeleteMoviesId(ctx, id)
	return err
}

// GetMoviesId converts echo context to params.
func (w *ServerInterfaceWrapper) GetMoviesId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetMoviesId(ctx, id)
	return err
}

// GetMoviesIdCert converts echo context to params.
func (w *ServerInterfaceWrapper) GetMoviesIdCert(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetMoviesIdCert(ctx, id)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/characters", wrapper.GetCharacters)
	router.POST(baseURL+"/characters", wrapper.PostCharacters)
	router.PUT(baseURL+"/characters", wrapper.PutCharacters)
	router.DELETE(baseURL+"/characters/:id", wrapper.DeleteCharactersId)
	router.GET(baseURL+"/characters/:id", wrapper.GetCharactersId)
	router.GET(baseURL+"/characters/:id/cert", wrapper.GetCharactersIdCert)
	router.GET(baseURL+"/movies", wrapper.GetMovies)
	router.POST(baseURL+"/movies", wrapper.PostMovies)
	router.PUT(baseURL+"/movies", wrapper.PutMovies)
	router.DELETE(baseURL+"/movies/:id", wrapper.DeleteMoviesId)
	router.GET(baseURL+"/movies/:id", wrapper.GetMoviesId)
	router.GET(baseURL+"/movies/:id/cert", wrapper.GetMoviesIdCert)

}

type GetCharactersRequestObject struct {
}

type GetCharactersResponseObject interface {
	VisitGetCharactersResponse(w http.ResponseWriter) error
}

type GetCharacters201JSONResponse []Character

func (response GetCharacters201JSONResponse) VisitGetCharactersResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(201)

	return json.NewEncoder(w).Encode(response)
}

type PostCharactersRequestObject struct {
	Body *PostCharactersJSONRequestBody
}

type PostCharactersResponseObject interface {
	VisitPostCharactersResponse(w http.ResponseWriter) error
}

type PostCharacters201JSONResponse Character

func (response PostCharacters201JSONResponse) VisitPostCharactersResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(201)

	return json.NewEncoder(w).Encode(response)
}

type PostCharacters412JSONResponse struct {
	Message interface{} `json:"message,omitempty"`
}

func (response PostCharacters412JSONResponse) VisitPostCharactersResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(412)

	return json.NewEncoder(w).Encode(response)
}

type PutCharactersRequestObject struct {
	Body *PutCharactersJSONRequestBody
}

type PutCharactersResponseObject interface {
	VisitPutCharactersResponse(w http.ResponseWriter) error
}

type PutCharacters201JSONResponse Character

func (response PutCharacters201JSONResponse) VisitPutCharactersResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(201)

	return json.NewEncoder(w).Encode(response)
}

type PutCharacters412JSONResponse struct {
	Message interface{} `json:"message,omitempty"`
}

func (response PutCharacters412JSONResponse) VisitPutCharactersResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(412)

	return json.NewEncoder(w).Encode(response)
}

type DeleteCharactersIdRequestObject struct {
	Id openapi_types.UUID `json:"id"`
}

type DeleteCharactersIdResponseObject interface {
	VisitDeleteCharactersIdResponse(w http.ResponseWriter) error
}

type DeleteCharactersId200Response struct {
}

func (response DeleteCharactersId200Response) VisitDeleteCharactersIdResponse(w http.ResponseWriter) error {
	w.WriteHeader(200)
	return nil
}

type GetCharactersIdRequestObject struct {
	Id openapi_types.UUID `json:"id"`
}

type GetCharactersIdResponseObject interface {
	VisitGetCharactersIdResponse(w http.ResponseWriter) error
}

type GetCharactersId201JSONResponse Character

func (response GetCharactersId201JSONResponse) VisitGetCharactersIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(201)

	return json.NewEncoder(w).Encode(response)
}

type GetCharactersIdCertRequestObject struct {
	Id openapi_types.UUID `json:"id"`
}

type GetCharactersIdCertResponseObject interface {
	VisitGetCharactersIdCertResponse(w http.ResponseWriter) error
}

type GetCharactersIdCert201TextResponse string

func (response GetCharactersIdCert201TextResponse) VisitGetCharactersIdCertResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "text/plain")
	w.WriteHeader(201)

	_, err := w.Write([]byte(response))
	return err
}

type GetMoviesRequestObject struct {
}

type GetMoviesResponseObject interface {
	VisitGetMoviesResponse(w http.ResponseWriter) error
}

type GetMovies201JSONResponse []Movie

func (response GetMovies201JSONResponse) VisitGetMoviesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(201)

	return json.NewEncoder(w).Encode(response)
}

type PostMoviesRequestObject struct {
	Body *PostMoviesJSONRequestBody
}

type PostMoviesResponseObject interface {
	VisitPostMoviesResponse(w http.ResponseWriter) error
}

type PostMovies201JSONResponse Movie

func (response PostMovies201JSONResponse) VisitPostMoviesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(201)

	return json.NewEncoder(w).Encode(response)
}

type PutMoviesRequestObject struct {
	Body *PutMoviesJSONRequestBody
}

type PutMoviesResponseObject interface {
	VisitPutMoviesResponse(w http.ResponseWriter) error
}

type PutMovies201JSONResponse Movie

func (response PutMovies201JSONResponse) VisitPutMoviesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(201)

	return json.NewEncoder(w).Encode(response)
}

type DeleteMoviesIdRequestObject struct {
	Id openapi_types.UUID `json:"id"`
}

type DeleteMoviesIdResponseObject interface {
	VisitDeleteMoviesIdResponse(w http.ResponseWriter) error
}

type DeleteMoviesId200Response struct {
}

func (response DeleteMoviesId200Response) VisitDeleteMoviesIdResponse(w http.ResponseWriter) error {
	w.WriteHeader(200)
	return nil
}

type GetMoviesIdRequestObject struct {
	Id openapi_types.UUID `json:"id"`
}

type GetMoviesIdResponseObject interface {
	VisitGetMoviesIdResponse(w http.ResponseWriter) error
}

type GetMoviesId201JSONResponse Movie

func (response GetMoviesId201JSONResponse) VisitGetMoviesIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(201)

	return json.NewEncoder(w).Encode(response)
}

type GetMoviesIdCertRequestObject struct {
	Id openapi_types.UUID `json:"id"`
}

type GetMoviesIdCertResponseObject interface {
	VisitGetMoviesIdCertResponse(w http.ResponseWriter) error
}

type GetMoviesIdCert201TextResponse string

func (response GetMoviesIdCert201TextResponse) VisitGetMoviesIdCertResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "text/plain")
	w.WriteHeader(201)

	_, err := w.Write([]byte(response))
	return err
}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {
	// Get all Characters
	// (GET /characters)
	GetCharacters(ctx context.Context, request GetCharactersRequestObject) (GetCharactersResponseObject, error)
	// Create Character
	// (POST /characters)
	PostCharacters(ctx context.Context, request PostCharactersRequestObject) (PostCharactersResponseObject, error)
	// Update Character
	// (PUT /characters)
	PutCharacters(ctx context.Context, request PutCharactersRequestObject) (PutCharactersResponseObject, error)
	// Delete Character
	// (DELETE /characters/{id})
	DeleteCharactersId(ctx context.Context, request DeleteCharactersIdRequestObject) (DeleteCharactersIdResponseObject, error)
	// Get Character by id
	// (GET /characters/{id})
	GetCharactersId(ctx context.Context, request GetCharactersIdRequestObject) (GetCharactersIdResponseObject, error)
	// Get character cert by id
	// (GET /characters/{id}/cert)
	GetCharactersIdCert(ctx context.Context, request GetCharactersIdCertRequestObject) (GetCharactersIdCertResponseObject, error)
	// Get all Movies
	// (GET /movies)
	GetMovies(ctx context.Context, request GetMoviesRequestObject) (GetMoviesResponseObject, error)
	// Create Movie
	// (POST /movies)
	PostMovies(ctx context.Context, request PostMoviesRequestObject) (PostMoviesResponseObject, error)
	// Update Movie
	// (PUT /movies)
	PutMovies(ctx context.Context, request PutMoviesRequestObject) (PutMoviesResponseObject, error)
	// Delete Movie
	// (DELETE /movies/{id})
	DeleteMoviesId(ctx context.Context, request DeleteMoviesIdRequestObject) (DeleteMoviesIdResponseObject, error)
	// Get Movie by id
	// (GET /movies/{id})
	GetMoviesId(ctx context.Context, request GetMoviesIdRequestObject) (GetMoviesIdResponseObject, error)
	// Get Movie cert by id
	// (GET /movies/{id}/cert)
	GetMoviesIdCert(ctx context.Context, request GetMoviesIdCertRequestObject) (GetMoviesIdCertResponseObject, error)
}

type StrictHandlerFunc = strictecho.StrictEchoHandlerFunc
type StrictMiddlewareFunc = strictecho.StrictEchoMiddlewareFunc

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares}
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
}

// GetCharacters operation middleware
func (sh *strictHandler) GetCharacters(ctx echo.Context) error {
	var request GetCharactersRequestObject

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetCharacters(ctx.Request().Context(), request.(GetCharactersRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetCharacters")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(GetCharactersResponseObject); ok {
		return validResponse.VisitGetCharactersResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// PostCharacters operation middleware
func (sh *strictHandler) PostCharacters(ctx echo.Context) error {
	var request PostCharactersRequestObject

	var body PostCharactersJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PostCharacters(ctx.Request().Context(), request.(PostCharactersRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostCharacters")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(PostCharactersResponseObject); ok {
		return validResponse.VisitPostCharactersResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// PutCharacters operation middleware
func (sh *strictHandler) PutCharacters(ctx echo.Context) error {
	var request PutCharactersRequestObject

	var body PutCharactersJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PutCharacters(ctx.Request().Context(), request.(PutCharactersRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PutCharacters")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(PutCharactersResponseObject); ok {
		return validResponse.VisitPutCharactersResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// DeleteCharactersId operation middleware
func (sh *strictHandler) DeleteCharactersId(ctx echo.Context, id openapi_types.UUID) error {
	var request DeleteCharactersIdRequestObject

	request.Id = id

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteCharactersId(ctx.Request().Context(), request.(DeleteCharactersIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteCharactersId")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(DeleteCharactersIdResponseObject); ok {
		return validResponse.VisitDeleteCharactersIdResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// GetCharactersId operation middleware
func (sh *strictHandler) GetCharactersId(ctx echo.Context, id openapi_types.UUID) error {
	var request GetCharactersIdRequestObject

	request.Id = id

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetCharactersId(ctx.Request().Context(), request.(GetCharactersIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetCharactersId")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(GetCharactersIdResponseObject); ok {
		return validResponse.VisitGetCharactersIdResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// GetCharactersIdCert operation middleware
func (sh *strictHandler) GetCharactersIdCert(ctx echo.Context, id openapi_types.UUID) error {
	var request GetCharactersIdCertRequestObject

	request.Id = id

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetCharactersIdCert(ctx.Request().Context(), request.(GetCharactersIdCertRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetCharactersIdCert")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(GetCharactersIdCertResponseObject); ok {
		return validResponse.VisitGetCharactersIdCertResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// GetMovies operation middleware
func (sh *strictHandler) GetMovies(ctx echo.Context) error {
	var request GetMoviesRequestObject

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetMovies(ctx.Request().Context(), request.(GetMoviesRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetMovies")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(GetMoviesResponseObject); ok {
		return validResponse.VisitGetMoviesResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// PostMovies operation middleware
func (sh *strictHandler) PostMovies(ctx echo.Context) error {
	var request PostMoviesRequestObject

	var body PostMoviesJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PostMovies(ctx.Request().Context(), request.(PostMoviesRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostMovies")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(PostMoviesResponseObject); ok {
		return validResponse.VisitPostMoviesResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// PutMovies operation middleware
func (sh *strictHandler) PutMovies(ctx echo.Context) error {
	var request PutMoviesRequestObject

	var body PutMoviesJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PutMovies(ctx.Request().Context(), request.(PutMoviesRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PutMovies")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(PutMoviesResponseObject); ok {
		return validResponse.VisitPutMoviesResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// DeleteMoviesId operation middleware
func (sh *strictHandler) DeleteMoviesId(ctx echo.Context, id openapi_types.UUID) error {
	var request DeleteMoviesIdRequestObject

	request.Id = id

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteMoviesId(ctx.Request().Context(), request.(DeleteMoviesIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteMoviesId")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(DeleteMoviesIdResponseObject); ok {
		return validResponse.VisitDeleteMoviesIdResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// GetMoviesId operation middleware
func (sh *strictHandler) GetMoviesId(ctx echo.Context, id openapi_types.UUID) error {
	var request GetMoviesIdRequestObject

	request.Id = id

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetMoviesId(ctx.Request().Context(), request.(GetMoviesIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetMoviesId")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(GetMoviesIdResponseObject); ok {
		return validResponse.VisitGetMoviesIdResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// GetMoviesIdCert operation middleware
func (sh *strictHandler) GetMoviesIdCert(ctx echo.Context, id openapi_types.UUID) error {
	var request GetMoviesIdCertRequestObject

	request.Id = id

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetMoviesIdCert(ctx.Request().Context(), request.(GetMoviesIdCertRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetMoviesIdCert")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(GetMoviesIdCertResponseObject); ok {
		return validResponse.VisitGetMoviesIdCertResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}
